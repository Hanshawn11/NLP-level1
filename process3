# PCA and model training, stored ,load 

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn import svm
from sklearn import metrics

csv_data = pd.read_csv('/content/drive/My Drive/data/senti_txtvec.csv')
df = pd.DataFrame(csv_data)
#print(df.shape)  # 506 * 2

x = df['senti']    # 1 or  0
y = df['txt_vec']

Y = []  #原来的数据是str，需要改成float
i = 0
for i in range(0,len(y)):
  data = df.iloc[i]['txt_vec']
  data_r = re.sub(u'[][]','',data)
  data_new = data_r.split()
  to_float = list(map(float,data_new))
  Y.append(to_float)
  
  i = i + 1
 
pca = PCA(n_components=100)
pca.fit(Y)

##画出pca图像选择合适的n_components
plt.figure(1, figsize=(4, 3))
plt.clf()
plt.axes([0.2, 0.2, 0.7, 0.7])
plt.plot(pca.explained_variance_, linewidth=2)
plt.axis('tight')
plt.xlabel('n_components')
plt.ylabel('explained_variance_')
plt.show()   

# It can be seen from the figure that 40-dimensional features can cover most of the information, so I set n_components = 40
Y_pca = PCA(n_components = 40).fit_transform(Y)
clf = svm.SVC(C=2, probability = True, gamma='auto')
clf.fit(Y_pca,x)

print('Test Accuracy: %.2f'% clf.score(Y_pca,x))
>>0.89
# 这里可以选择画一下ROC curve

# save model
import pickle
model = clf.fit(Y_pca,x)
store = pickle.dumps(model)
f=open('hotel_svm.model', "wb+")
f.write(store)
f.close()


#take a review as example 

test_review = np.array(Y[0])
test1 = test_review[:40]   # input need to be 40 dim
test = test1.reshape(1,-1) 

#load model
f2=open('/content/hotel_svm.model','rb')
loader = f2.read()
model1=pickle.loads(loader)
predicted = model1.predict(test)
print(predicted[0])

print ("Done\n")
